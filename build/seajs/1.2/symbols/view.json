{"desc":"View类","alias":"View","methods":[{"desc":"扩展View","alias":"View.mixin","isStatic":true,"memberOf":"View","isa":"FUNCTION","_name":"mixin","_params":[{"title":"param","desc":"扩展到原型上的方法","type":"Object","name":"props"},{"title":"param","desc":"在初始化view时进行调用的方法","type":"Function","name":"ctor"}],"example":[{"title":"example","desc":"KISSY.add('app/tview',function(S,View){\r    return View.mixin({\r        test:function(){\r            alert(this.$attr);\r        }\r    },function(){\r         this.$attr='test';\r    });\r},{\r    requires:['magix/view']\r});\r//加入Magix.start的extensions中\r\r Magix.start({\r     //...\r     extensions:['app/tview']\r\r });\r\r//这样完成后，所有的view对象都会有一个$attr属性和test方法\r//当前上述功能也可以用继承实现，但继承层次太多时，可以考虑使用扩展来消除多层次的继承"}]},{"desc":"使用xhr获取当前view对应的模板内容，仅在开发app阶段时使用，打包上线后html与js打包在一起，不会调用这个方法","alias":"View#fetchTmpl","memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"fetchTmpl","_params":[{"title":"param","desc":"路径","type":"String","name":"path"},{"title":"param","desc":"获取完成后的回调","type":"Function","name":"fn"}]},{"desc":"渲染view，供最终view开发者覆盖","alias":"View#render","memberOf":"View","isa":"FUNCTION","_name":"render"},{"desc":"初始化方法，供最终的view开发人员进行覆盖","alias":"View#init","memberOf":"View","isa":"FUNCTION","_name":"init","_params":[{"title":"param","desc":"初始化时，外部传递的参数","type":"Object","name":"extra"},{"title":"param","desc":"地址栏变化的相关信息，比如从某个pathname过来的","type":"Object","name":"locChanged"}]},{"desc":"加载view内容","alias":"View#load","memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"load"},{"desc":"通知当前view即将开始进行html的更新","alias":"View#beginUpdate","memberOf":"View","isa":"FUNCTION","_name":"beginUpdate","_params":[{"title":"param","desc":"哪块区域需要更新，默认整个view","type":"String","name":"id","isOptional":true}]},{"desc":"通知当前view结束html的更新","alias":"View#endUpdate","memberOf":"View","isa":"FUNCTION","_name":"endUpdate","_params":[{"title":"param","desc":"哪块区域结束更新，默认整个view","type":"String","name":"id","isOptional":true}]},{"type":"Integer","desc":"通知当前view进行更新，与beginUpdate不同的是：begin是开始更新html，notify是开始调用更新的方法，通常render已经自动做了处理，对于用户自定义的获取数据并更新界面时，在开始更新前，需要调用一下该方法","alias":"View#notifyUpdate","memberOf":"View","returns":[{"title":"return","desc":"当前view的签名","type":"Integer"}],"isa":"FUNCTION","_name":"notifyUpdate"},{"type":"String","desc":"包装mx-event，自动添加vframe id,用于事件发生时，调用该view处理","alias":"View#wrapMxEvent","memberOf":"View","returns":[{"title":"return","desc":"返回处理后的字符串","type":"String"}],"isa":"FUNCTION","_name":"wrapMxEvent","_params":[{"title":"param","desc":"html字符串","type":"String","name":"html"}]},{"type":"Function","desc":"包装异步回调","alias":"View#wrapAsync","memberOf":"View","returns":[{"title":"return","type":"Function"}],"isa":"FUNCTION","_name":"wrapAsync","_params":[{"title":"param","desc":"异步回调的function","type":"Function","name":"fn"}],"example":[{"title":"example","desc":"render:function(){\r    setTimeout(this.wrapAsync(function(){\r        //codes\r    }),50000);\r}\r//为什么要包装一次？\r//Magix是单页应用，有可能异步回调执行时，当前view已经被销毁。比如上例中的setTimeout，50s后执行回调，如果你的回调中去操作了DOM，则会出错，为了避免这种情况的出现，可以调用view的wrapAsync包装一次。(该示例中最好的做法是在view销毁时清除setTimeout，但有时候你很难控制回调的执行，所以最好包装一次)\r//\r//"}]},{"desc":"设置view的html内容","alias":"View#setViewHTML","memberOf":"View","isa":"FUNCTION","_name":"setViewHTML","_params":[{"title":"param","desc":"更新节点的id","type":"String","name":"id"},{"title":"param","desc":"html字符串","type":"Strig","name":"html"}],"example":[{"title":"example","desc":"render:function(){\r    this.setViewHTML(this.id,this.template);//渲染界面，当界面复杂时，请考虑用其它方案进行更新\r}"}]},{"desc":"监视地址栏中的参数或pathname，有变动时，才调用当前view的locationChange方法。通常情况下location有变化就会引起当前view的locationChange被调用，但这会带来一些不必要的麻烦，所以你可以指定地址栏中哪些参数有变化时才引起locationChange调用，使得view只关注与自已需要刷新有关的参数","alias":"View#observeLocation","memberOf":"View","isa":"FUNCTION","_name":"observeLocation","_params":[{"title":"param","desc":"数组字符串或对象","type":"Array|String|Object","name":"args"}],"example":[{"title":"example","desc":"return View.extend({\r     init:function(){\r         this.observeLocation('page,rows');//关注地址栏中的page rows2个参数的变化，当其中的任意一个改变时，才引起当前view的locationChange被调用\r         this.observeLocation({\r             pathname:true//关注pathname的变化\r         });\r         //也可以写成下面的形式\r         //this.observeLocation({\r         //    keys:['page','rows'],\r         //    pathname:true\r         //})\r     },\r     render:function(e){\r         if(e.changed.isParam('page')){};//检测是否是page发生的改变\r         if(e.changed.isParam('rows')){};//检测是否是rows发生的改变\r     }\r});"}]},{"type":"Boolean","desc":"检测通过observeLocation方法指定的key对应的值有没有发生变化","alias":"View#olChg","memberOf":"View","returns":[{"title":"return","desc":"是否发生改变","type":"Boolean"}],"isPrivate":true,"isa":"FUNCTION","_name":"olChg","_params":[{"title":"param","desc":"对象","type":"Object","name":"changed"}]},{"desc":"销毁当前view","alias":"View#oust","memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"oust"},{"type":"View","desc":"获取渲染当前view的父view","alias":"View#parentView","memberOf":"View","returns":[{"title":"return","type":"View"}],"isa":"FUNCTION","_name":"parentView"},{"desc":"处理dom事件","alias":"View#pEvt","memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"pEvt","_params":[{"title":"param","desc":"事件信息对象","type":"Object","name":"e"},{"title":"param","name":"eventType"},{"title":"param","name":"e"}]},{"desc":"处理代理事件","alias":"View#dEvts","memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"dEvts","_params":[{"title":"param","desc":"是否销毁","type":"Boolean","name":"dispose"}]},{"desc":"添加节点，用于inside的判断","alias":"View#addNode","memberOf":"View","isa":"FUNCTION","_name":"addNode","_params":[{"title":"param","desc":"dom节点id","type":"String","name":"id"}]},{"desc":"移除节点","alias":"View#removeNode","memberOf":"View","isa":"FUNCTION","_name":"removeNode","_params":[{"title":"param","desc":"dom节点id","type":"String","name":"id"}]},{"type":"Boolean","desc":"判断节点是否在当前view控制的dom节点内","alias":"View#inside","memberOf":"View","returns":[{"title":"return","type":"Boolean"}],"isa":"FUNCTION","_name":"inside","_params":[{"title":"param","desc":"节点id","type":"String","name":"node"}]},{"desc":"调用magix/router的navigate方法","alias":"View#navigate","memberOf":"View","isa":"FUNCTION","_name":"navigate"},{"type":"Object","desc":"让view帮你管理资源，强烈建议对组件等进行托管","alias":"View#manage","memberOf":"View","returns":[{"title":"return","desc":"返回传入的资源","type":"Object"}],"isa":"FUNCTION","_name":"manage","_params":[{"title":"param","desc":"托管的资源或要共享的资源标识key","type":"String|Object","name":"key"},{"title":"param","desc":"要托管的资源","type":"Object","name":"res"},{"title":"param","desc":"是否在最终view销毁时才去销毁这个托管的资源，如果该参数为true时，可以调用destroyManaged来销毁这个资源","type":"Boolean","name":"lastly","isOptional":true}],"example":[{"title":"example","desc":"init:function(){\r     this.manage('user_list',[//管理对象资源\r         {id:1,name:'a'},\r         {id:2,name:'b'}\r     ],true);//仅在view销毁时才销毁这个托管的资源\r},\rrender:function(){\r     var _self=this;\r     var m=new Model();\r     m.load({\r         success:function(resp){\r             //TODO\r             var brix=new BrixDropdownList();\r\r             _self.manage(brix);//管理组件\r\r             var pagination=_self.manage(new BrixPagination());//也可以这样\r\r             var timer=_self.manage(setTimeout(function(){\r                 S.log('timer');\r             },2000));//也可以管理定时器\r\r\r             var userList=_self.getManaged('user_list');//通过key取托管的资源\r\r             S.log(userList);\r         },\r         error:function(msg){\r             //TODO\r         }\r     });\r\r     _self.manage(m);\r}"}]},{"type":"Object","desc":"获取托管的资源","alias":"View#getManaged","memberOf":"View","returns":[{"title":"return","type":"Object"}],"isa":"FUNCTION","_name":"getManaged","_params":[{"title":"param","desc":"托管资源时传入的标识key","type":"String","name":"key"},{"title":"param","desc":"获取后是否从缓存中移除","type":"Boolean","name":"remove","isOptional":true}]},{"type":"Object","desc":"移除托管的资源","alias":"View#removeManaged","memberOf":"View","returns":[{"title":"return","desc":"返回移除的资源","type":"Object"}],"isa":"FUNCTION","_name":"removeManaged","_params":[{"title":"param","desc":"托管时标识key或托管的对象","type":"String|Object","name":"key"}]},{"type":"Object","desc":"销毁托管的资源","alias":"View#destroyManaged","memberOf":"View","returns":[{"title":"return","desc":"返回销毁的托管资源","type":"Object"}],"isa":"FUNCTION","_name":"destroyManaged","_params":[{"title":"param","desc":"manage时提供的资源的key","type":"String","name":"key"},{"title":"param","desc":"销毁后是否依然在缓存中保留该资源的引用","type":"Boolean","name":"keepIt","isOptional":true}]},{"desc":"绑定事件","alias":"View#on","memberOf":"View","isa":"FUNCTION","_name":"on","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"},{"title":"param","desc":"事件监听插入的位置","type":"Interger","name":"insert"}],"example":[{"title":"example","desc":"var T=Magix.mix({},Event);\r\n        T.on('done',function(e){\r\n            alert(1);\r\n        });\r\n        T.on('done',function(e){\r\n            alert(2);\r\n            T.off('done',arguments.callee);\r\n        });\r\n        T.on('done',function(e){\r\n            alert(3);\r\n        },0);//监听插入到开始位置\r\n\r\n        T.once('done',function(e){\r\n            alert('once');\r\n        });\r\n\r\n        T.fire('done',{data:'test'});\r\n        T.fire('done',{data:'test2'});"}]},{"desc":"触发事件","alias":"View#fire","memberOf":"View","isa":"FUNCTION","_name":"fire","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件对象","type":"Object","name":"data"},{"title":"param","desc":"事件触发完成后是否移除这个事件的所有监听","type":"Boolean","name":"remove"},{"title":"param","desc":"是否从后向前触发事件的监听列表","type":"Boolean","name":"lastToFirst"}]},{"desc":"解除事件绑定","alias":"View#off","memberOf":"View","isa":"FUNCTION","_name":"off","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"}]},{"desc":"绑定事件，触发一次后即解绑","alias":"View#once","memberOf":"View","isa":"FUNCTION","_name":"once","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"}]},{"desc":"依托另外一个对象的事件自动解绑","alias":"View#rely","memberOf":"View","isa":"FUNCTION","_name":"rely","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"},{"title":"param","desc":"依托的对象","type":"Object","name":"relyObj"},{"title":"param","desc":"依托的名称","type":"String","name":"relyName"},{"title":"param","desc":"事件监听插入的位置","type":"Interger","name":"insert"}],"example":[{"title":"example","desc":"var a=Magix.mix({},Event);\rvar b=Magix.mix({},Event);\ra.rely('test',function(e){\r\r},b,'destroy');\r\ra.fire('test');//正常\rb.fire('destroy');\ra.fire('test');//不再打印console.log"}]}],"events":[{"desc":"当view调用setViewHTML刷新前触发","alias":"View#event:prerender","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"prerender","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"当view首次完成界面的html设置后触发，view有没有模板均会触发该事件，对于有模板的view，会等到模板取回，第一次调用setViewHTML更新界面后才触发，总之该事件触发后，您就可以访问view的HTML DOM节点对象（该事件仅代表自身的html创建完成，如果需要对整个子view也要监控，请使用created事件）","alias":"View#event:primed","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"primed","_params":[{"title":"param","desc":"view首次调用render完成界面的创建后触发","type":"Object","name":"e"}]},{"desc":"每次调用setViewHTML更新view内容完成后触发","alias":"View#event:rendered","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"rendered","_params":[{"title":"param","desc":"view每次调用setViewHTML完成后触发，当hasTmpl属性为false时，并不会触发该事 件，但会触发primed首次完成创建界面的事件","type":"Object","name":"e"}]},{"desc":"view销毁时触发","alias":"View#event:destroy","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"destroy","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"view调用init方法后触发","alias":"View#event:inited","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"inited","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"view自身和所有子孙view创建完成后触发，常用于要在某个view中统一绑定事件或统一做字段校验，而这个view是由许多子孙view组成的，通过监听该事件可知道子孙view什么时间创建完成（注意：当view中有子view，且该子view是通过程序动态mountView而不是通过mx-view指定时，该事件会也会等待到view创建完成触发，而对于您在某个view中有如下代码：<div><vframe></vframe></div>，有一个空的vframe且未指定mx-view属性，同时您在这个view中没有动态渲染vframe对应的view，则该事件不会触发，magix无法识别出您留空vframe的意图，到底是需要动态mount还是手误，不过在具体应用中，出现空vframe且没有动态mount几乎是不存在的^_^）","alias":"View#event:created","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"created","_params":[{"title":"param","type":"Object","name":"e"}],"example":[{"title":"example","desc":"init:function(){\r     this.on('created',function(){\r         //\r     })\r}"}]},{"desc":"view自身和所有子孙view有改动时触发，改动包括刷新和重新mountView，与created一起使用，当view自身和所有子孙view创建完成会触发created，当其中的一个view刷新或重新mountView，会触发childrenAlter，当是刷新时，刷新完成会再次触发created事件，因此这2个事件不只触发一次！！但这2个事件会成对触发，比如触发几次childrenAlter就会触发几次created","alias":"View#event:alter","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"alter","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"异步更新ui的方法(render)被调用前触发","alias":"View#event:rendercall","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"rendercall","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"当view准备好模板(模板有可能是异步获取的)，调用init和render之前触发。可在该事件内对template进行一次处理","alias":"View#event:interact","memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"interact","_params":[{"title":"param","type":"Object","name":"e"}]}],"isa":"CONSTRUCTOR","_name":"View","_params":[{"title":"param","desc":"创建view时，需要附加到view对象上的其它属性","type":"Object","name":"ops"}],"inherits":[{"alias":"Event.on","as":"View#on"},{"alias":"Event.fire","as":"View#fire"},{"alias":"Event.off","as":"View#off"},{"alias":"Event.once","as":"View#once"},{"alias":"Event.rely","as":"View#rely"}],"example":[{"title":"example","desc":"关于事件:\r示例：\r  html写法：\r\r  &lt;input type=\"button\" mx-click=\"test({id:100,name:xinglie})\" value=\"test\" /&gt;\r  &lt;a href=\"http://etao.com\" mx-click=\"test&lt;prevent&gt;({com:etao.com})\"&gt;http://etao.com&lt;/a&gt;\r\r  view写法：\r\r    'test&lt;click&gt;':function(e){\r         //e.currentId 处理事件的dom节点id(即带有mx-click属性的节点)\r         //e.targetId 触发事件的dom节点id(即鼠标点中的节点，在currentId里包含其它节点时，currentId与targetId有可能不一样)\r         //e.params  传递的参数\r         //e.params.com,e.params.id,e.params.name\r     },\r     'test&lt;mousedown&gt;':function(e){\r\r      }\r\r //上述示例对test方法标注了click与mousedown事件，也可以合写成：\r 'test&lt;click,mousedown&gt;':function(e){\r     alert(e.type);//可通过type识别是哪种事件类型\r }"}],"properties":[{"type":"String","desc":"当前view与页面vframe节点对应的id","alias":"View#id","memberOf":"View","isa":"OBJECT","_name":"id"},{"type":"Vframe","desc":"拥有当前view的vframe对象","alias":"View#owner","memberOf":"View","isa":"OBJECT","_name":"owner"},{"type":"Object","desc":"vom对象","alias":"View#vom","memberOf":"View","isa":"OBJECT","_name":"vom"},{"type":"Integer","desc":"view的签名，用于刷新，销毁等的异步标识判断，当view销毁时，该属性是小于等于零的数","alias":"View#sign","memberOf":"View","isa":"OBJECT","_name":"sign"},{"type":"String","desc":"当前view对应的模板字符串(当hasTmpl为true时)，该属性在interact事件触发后才存在","alias":"View#template","memberOf":"View","isa":"OBJECT","_name":"template"},{"type":"Boolean","desc":"标识当前view有没有渲染过，即primed事件有没有触发过","alias":"View#rendered","memberOf":"View","isa":"OBJECT","_name":"rendered"},{"type":"Object","desc":"window.locaiton.href解析出来的对象","alias":"View#location","memberOf":"View","isa":"OBJECT","_name":"location"},{"desc":"标识当前view是否有模板文件","alias":"View#hasTmpl","memberOf":"View","defaultValue":"true","isa":"OBJECT","_name":"hasTmpl"}]}